name: build-example-ios
on:
  workflow_dispatch:
    inputs:
      refToBuild:
        description: 'Specific Commit SHA (Optional)'
        required: false
        type: string
  
  release:
    types: [published]

  pull_request:
    types: 
      - closed

    branches:
      - 'master'

jobs:
  build:
    name: Build example app
    runs-on: macos-14
    if: ${{ (github.event.pull_request.merged == true) || (github.event_name != 'pull_request') }}

    steps:
      - name: Cancel previous runs
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.refToBuild == '' }}
        uses: styfle/cancel-workflow-action@0.9.1

      - name: Show self-hosted machine infomation
        run: uname -a

      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      # Setup (Checkout)

      - name: Checkout (Specific Ref) 
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.refToBuild != '' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.refToBuild }}

      - name: Checkout repo from main branch
        if: ${{ github.event.inputs.refToBuild == '' }}
        uses: actions/checkout@v4

      # Set Commit Status

      - name: Set Env COMMIT_SHA to Specific Commit
        if: ${{ github.event.inputs.refToBuild != '' }}
        run: echo "COMMIT_SHA=${{ github.event.inputs.refToBuild }}" >> $GITHUB_ENV

      - name: Set Env COMMIT_SHA to Github Context
        if: ${{ github.event.inputs.refToBuild == '' }}
        run: echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ env.COMMIT_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      # Setup (Build Env)

      - name: Install Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: actions/setup-node@v4
        with:
          # node-version-file: '.nvmrc'
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Initialize library
        run: |
            yarn install 
            cd example
            yarn install

      # Build Start...

      - name: Build JS
        run: yarn run bob build

      - name: Clear example pods + derived data
        run: yarn run nuke:example-pods ; yarn run nuke:derived-data

      - name: 1/3 - Run `pod-install` (fabric, static library)
        run: yarn pod-install:new-static

      - name: 1/3 - Build example (fabric, static library)
        run: yarn run build:ios

      - name: Clear example pods + derived data
        run: yarn run nuke:example-pods ; yarn run nuke:derived-data

      - name: 2/3 - Run `pod-install` (paper, static library)
        run: yarn pod-install:old-static

      - name: 2/3 - Build example (paper, static library)
        run: yarn run build:ios

      - name: Clear example pods + derived data
        run: yarn run nuke:example-pods ; yarn run nuke:derived-data

      - name: 3/3 - Run `pod-install` (paper, dynamic frameworks)
        run: yarn pod-install:old-dynamic

      - name: 3/3 - Build example (paper, dynamic frameworks)
        run: yarn run build:ios

      # Build Complete
 
      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ env.COMMIT_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}